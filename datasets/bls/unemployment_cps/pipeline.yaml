# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
resources:

  - type: bigquery_table
    # Required Properties:
    table_id: country_names_area

    # Description of the table
    description: "country_names_area dataset"
dag:
  initialize:
    dag_id: country_names_area
    default_args:
      owner: "Google"

      # When set to True, keeps a task from getting triggered if the previous schedule for the task hasnâ€™t succeeded
      depends_on_past: False
      start_date: '2021-03-01'
    max_active_runs: 1
    schedule_interval: "@daily"  # run once a week at Sunday 12am
    catchup: False
    default_view: graph

  tasks:

    - operator: "KubernetesPodOperator"

      # Task description
      description: "Run CSV transform within kubernetes pod"

      args:

        task_id: "census_bureau_international_country_names_area_transform_csv"
        
        startup_timeout_seconds: 600

        # The name of the pod in which the task will run. This will be used (plus a random suffix) to generate a pod id
        name: "country_names_area" 

        # The namespace to run within Kubernetes. Always set its value to "default" because we follow the guideline that KubernetesPodOperator will only be used for very light workloads, i.e. use the Cloud Composer environment's resources without starving other pipelines.
        namespace: "default"
        
        image_pull_policy: "Always"

        # Docker images will be built and pushed to GCR by default whenever the `scripts/generate_dag.py` is run. To skip building and pushing images, use the optional `--skip-builds` flag.
        image: "{{ var.json.census_bureau_international.container_registry.run_csv_transform_kub_country_names_area}}"

        # Set the environment variables you need initialized in the container. Use these as input variables for the script your container is expected to perform.
        env_vars:
          SOURCE_URL: "https://storage.cloud.google.com/pdp-feeds-staging/Census/idbzip/IDBextCTYS.csv" 
          SOURCE_FILE: "files/data.csv"
          TARGET_FILE: "files/data_output.csv"
          TARGET_GCS_BUCKET: "{{ var.json.shared.composer_bucket }}"
          TARGET_GCS_PATH: "data/census_bureau_international/country_names_area/data_output.csv"

        # Set resource limits for the pod here. For resource units in Kubernetes, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes
        resources:
          limit_memory: "4G"
          limit_cpu: "1"

    - operator: "GoogleCloudStorageToBigQueryOperator"
      description: "Task to load CSV data to a BigQuery table"

      args:
        task_id: "load_census_bureau_international_country_names_area_to_bq"

      # The GCS bucket where the CSV file is located in.
        bucket: "{{ var.json.shared.composer_bucket }}"

      # The GCS object path for the CSV file
        source_objects: ["data/census_bureau_international/country_names_area/data_output.csv"]
        source_format: "CSV"
        destination_project_dataset_table: "census_bureau_international.country_names_area"

      # Use this if your CSV file contains a header row
        skip_leading_rows: 1

      # How to write data to the table: overwrite, append, or write if empty
      # See https://cloud.google.com/bigquery/docs/reference/auditlogs/rest/Shared.Types/WriteDisposition
        write_disposition: "WRITE_TRUNCATE"

      # The BigQuery table schema based on the CSV file. For more info, see
      # https://cloud.google.com/bigquery/docs/schemas.
      # Always use snake_case and lowercase for column names, and be explicit,
      # i.e. specify modes for all columns.

        schema_fields:
          - name: "country_code"
            type: "STRING"
            mode: "required"
          - name: "country_name"
            type: "STRING"
            mode: "NULLABLE"
          - name: "country_area"
            type: "FLOAT"
            mode: "NULLABLE"
      
  graph_paths: 
    - "census_bureau_international_country_names_area_transform_csv >> load_census_bureau_international_country_names_area_to_bq"
